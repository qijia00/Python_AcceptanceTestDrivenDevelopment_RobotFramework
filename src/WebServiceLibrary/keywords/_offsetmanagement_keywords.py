import json
from robot.api import logger
from _WebServiceCore import _WebServiceCore
from _sitemanagement_keywords import _SiteManagement_Keywords as siteinfo


class _OffsetManagement_Keywords(_WebServiceCore):
    offsets = dict()

    def get_registration_offset(self, session_index=''):
        """ Get Registration Offset
        
        Request for registration offset of Polaris
        
        .. code:: python
        
            {
                'offset': 132
            }
            
        For more information, visit `/register`_.
        
        .. _/register: http://wiki:8090/pages/viewpage.action?pageId=4849856#DataWebServiceAPI-/api/register        
        """

        register = self._assert_json_response_stop_on_error(self._get('register', session_index=session_index), 'offset')

        logger.info('Register offset {0}'.format(register))
        return register

    def validate_registration_offset(self, registration, session_index=''):
        """ Validate Registration Offset
        
        Validates Polaris registration offset.
        This keyword calls \`Get registration offset\` keyword and validates it.
        
        Variable
            *registration*
                - Polaris registration offset to validate
            *session_index*
                - optional input, will use the most recently returned session id if not specified.
        """
        assert int(registration), ValueError('Invalid registration input')

        register = self.get_registration_offset(session_index=session_index)

        assert registration == register, AssertionError('Invalid registration offset!')

    def get_offsets(self, site_index, num, session_index=''):
        """ Get ECU offsets
        
        Requests *num* ECU offsets from a specific *site_index*.
        
        Variables
            *site_index*
                - reference to the site id index generated by reading the ECU databases
            *num*
                - the number of offsets you want to get
            *session_index*
                - optional input, will use the most recently returned session id if not specified.

        .. code:: robotframework

            *** Test Cases ***
            Sample
                Get offsets   SITE0   1

        For more information, visit `/site/X/offsets/N`_.
        
        .. _/site/X/offsets/N: http://wiki:8090/pages/viewpage.action?pageId=4849856#DataWebServiceAPI-/api/site/X/offsets/N     
        """
        assert site_index in siteinfo.site_ids.keys(), AssertionError('Invalid site {0}'
                                                                      ' Please select from the following sites {1}'
                                                                      .format(site_index, siteinfo.site_ids.keys()))

        offsets_list = self._assert_json_response_stop_on_error(self._get('site/{0}/offsets/{1}'
                                                                          .format(siteinfo.site_ids[site_index], num), session_index=session_index),
                                                                'offsets')

        assert isinstance(offsets_list, list), AssertionError('Invalid ECU response of {0}'.format(offsets_list))
        logger.info('Allocated and returned {0} offset(s) is/are {1}'.format(num, offsets_list))
        for offset in offsets_list:
            if offset not in _OffsetManagement_Keywords.offsets.values():
                _OffsetManagement_Keywords.offsets['OFFSET{0}'.format(len(_OffsetManagement_Keywords.offsets))] = offset

        return offsets_list

    def get_offline_offset(self, site_index, session_index=''):
        """ Get offline site offsets

        Requests ECU offsets from a specific *site_index*.

        Variables
            *site_index*
                - reference to the site id index generated by reading the ECU databases
            *num*
                - the number of offsets you want to get
            *session_index*
                - optional input, will use the most recently returned session id if not specified.

        .. code:: robotframework

            *** Test Cases ***
            Sample
                Login   ${user}   ${pass}
                Get database information
                # For offline site, use Get offset to obtain "ECU" offset
                ${offset}=   Get Offline offset   SITE0
                ${ref_addrs_list}=   Get addresses   site_index=SITE0   offset=${offset}   num=2

        For more information, visit `/site/X/offsets/N`_.

        .. _/site/X/offsets/N: http://wiki:8090/pages/viewpage.action?pageId=4849856#DataWebServiceAPI-/api/site/X/offsets/N
        """
        offset = self.get_offsets(site_index, 1, session_index=session_index)[0]
        return offset

    def free_offsets(self, site_index, json_payload, session_index=''):
        """ Free Offsets from Site
        
        Free specified offsets from site
        
        Variables
            *site_index*
                - reference to the site id index generated by reading the ECU databases
            *json_payload*
                - string that contains json configuration of the offsets to release
            *session_index*
                - optional input, will use the most recently returned session id if not specified.
                
        .. code:: robotframework
        
            *** Variables ***
            ${offsets}      SEPARATOR=\\n
            ...   {
            ...        'offsets': [103,104,105,106,107]
            ...    }
            
            *** Test Cases ***
            Sample
                Free offsets   site_index=SITE0   json_payload=${offsets}
                ${offsets_list}=    Get offsets   SITE0   1
                Free offsets   SITE0   {"offsets":${offsets_list}}
                        
        For more information, visit `/site/X/offsets`_.
        
        .. _/site/X/offsets: http://wiki:8090/pages/viewpage.action?pageId=4849856#DataWebServiceAPI-/api/site/X/offsets     
        """

        assert site_index in siteinfo.site_ids, AssertionError('Invalid site {0}'
                                                               'Please select from the following sites {1}'
                                                               .format(site_index, siteinfo.site_ids.keys()))

        try:
            offsets = json.loads(json_payload)
        except ValueError:
            raise ValueError('Invalid json payload!')

        # make sure 'offsets' in in offsets, comma is needed after 'offsets' so it is a list
        # for item in ('offsets',):
        #     assert item in offsets, AssertionError('Unable to find offsets!')
        assert 'offsets' in offsets, AssertionError('Unable to find offsets!')
        assert isinstance(offsets['offsets'], list), ValueError('Invalid offsets input.')

        self._assert_json_response_stop_on_error(self._post('site/{0}/offsets'
                                                            .format(siteinfo.site_ids[site_index]), json_payload, session_index=session_index))

    def get_addresses(self, site_index, offset, num, session_index=''):
        """ Get Addresses to the Site ECUs
        
        Allocates a number (*num*) of reference addresses to the ECU of a specified site.
        
        Variables
            *site_index*
                - reference to the site id index generated by reading the ECU databases
            *offset*
                - ECU offset 
            *num*
                - number of addresses to allocate
            *session_index*
                - optional input, will use the most recently returned session id if not specified.

        .. code:: robotframework

            *** Variable ***
            ${IP}   172.24.172.111

            *** Test Cases ***
            Sample
                Login   ${user}   ${pass}
                Get database information
                ${ecu_offset}=   get ecu offset
                ${ref_addrs_list}=   Get addresses   site_index=SITE0   offset=${ecu_offset}   num=2

                Login   ${user}   ${pass}
                Get database information
                # For offline site, use Get offset to obtain "ECU" offset
                ${offset}=   Get Offline offset   SITE0
                ${ref_addrs_list}=   Get addresses   site_index=SITE0   offset=${offset}   num=2

        For more information, visit `/site/X/ecu/Y/ref-addresses/N`_.
        
        .. _/site/X/ecu/Y/ref-addresses/N: http://wiki:8090/pages/viewpage.action?pageId=4849856#DataWebServiceAPI-/api/site/X/ecu/Y/ref-addresses/N  
        """
        assert site_index in siteinfo.site_ids, AssertionError('Invalid site {0}'
                                                               'Please select from the following sites {1}'
                                                               .format(site_index, siteinfo.site_ids.keys()))

        ref_addrs = self._assert_json_response_stop_on_error(self._get('site/{0}/ecu/{1}/ref-addresses/{2}'
                                                                       .format(siteinfo.site_ids[site_index], offset, num), session_index=session_index),
                                                             'ref-addresses')
        assert isinstance(ref_addrs, list), AssertionError('Invalid ECU response of {0}'.format(ref_addrs))

        logger.info('Register offset {0}'.format(ref_addrs))
        return ref_addrs

    def free_addresses(self, site_index, json_payload, offset='', session_index=''):
        """ Free Addresses from ECU and/or Site
        
        Free specified address from ECU or site.
        If *offset* is populated, specified addresses are removed from ECU offset in the site.
        If *offset* is omitted, specified address are removed from site.
         
        Variables
            *site_index*
                - reference to the site id index generated by reading the ECU databases
            *json_payload*
                - string that contains json configuration of the offsets to release                
            *offset*
                - optional ECU offset 
            *session_index*
                - optional input, will use the most recently returned session id if not specified.

        .. code:: robotframework
        
            *** Variables ***
            ${addr}      SEPARATOR=\\n
            ...   {
            ...        'ref-addresses': [6619129, 6619128, 6619127, 6619126, 6619125]
            ...   }
            
            *** Test Cases ***
            Sample
                Free addresses   site_index=SITE0   json_payload=${addr}
                Free addresses   site_index=SITE0   json_payload=${addr}   offset=100

                Login   ${user}   ${pass}
                Get database information
                ${offsets_list}=   Get offsets   SITE0   2
                ${ecu_offset}=   get ecu offset
                ${ref_addrs_list}=   Get addresses   site_index=SITE0   offset=${ecu_offset}   num=2
                # test /api/site/X/ecu/Y/ref-addresses
                Free addresses   SITE0   {"ref-addresses":${ref_addrs_list}}   ${ecu_offset}
                ${ref_addrs_list}=   Get addresses   site_index=SITE0   offset=${ecu_offset}   num=2
                # test /api/site/X/ref-addresses
                Free addresses   SITE0   {"ref-addresses":${ref_addrs_list}}
                
        For more information, visit `/site/X/ecu/Y/ref-addresses`_.
        
        .. _/site/X/ecu/Y/ref-addresses: http://wiki:8090/pages/viewpage.action?pageId=4849856#DataWebServiceAPI-/api/site/X/ecu/Y/ref-addresses
        """
        assert site_index in siteinfo.site_ids, AssertionError('Invalid site {0}'
                                                               'Please select from the following sites {1}'
                                                               .format(site_index, siteinfo.site_ids.keys()))

        try:
            addresses = json.loads(json_payload)
        except ValueError:
            raise ValueError('Invalid json payload!')

        assert 'ref-addresses' in addresses, AssertionError('Unable to find addresses!')
        assert isinstance(addresses['ref-addresses'], list), ValueError('Invalid reference addresses input.')

        if offset is '':
            self._assert_json_response_stop_on_error(self._post('site/{0}/ref-addresses'
                                                                .format(siteinfo.site_ids[site_index]),
                                                                json_payload, session_index=session_index))
            logger.info(self.last_url)
        else:
            self._assert_json_response_stop_on_error(self._post('site/{0}/ecu/{1}/ref-addresses'
                                                                .format(siteinfo.site_ids[site_index], offset),
                                                                json_payload, session_index=session_index))
            logger.info(self.last_url)
