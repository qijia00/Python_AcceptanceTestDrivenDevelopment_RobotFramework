import os
import json
import ntpath
from shutil import copyfile
from robot.api import logger
from datetime import datetime
from _WebServiceCore import _WebServiceCore
from _sitemanagement_keywords import _SiteManagement_Keywords as siteinfo
from _misc_keywords import _Misc_Keywords as miscinfo
from WebServiceLibrary.external import utils


class _TableManagement_Keywords(_WebServiceCore):
    floorplans = dict()

    def get_floorplan(self, site_index, floor_index, location, session_index=''):
        """ Get Floorplan
        
        Download the floor plan of a site.
        
        Variable
            *site_index*
                - reference to the site id index generated by reading the ECU databases
            *floor_index*
                - reference to the floor id to be downloaded
            *location*
                - directory location to save the downloaded floorplan
            *session_index*
                - optional input, will use the most recently returned session id if not specified.

        .. code:: robotframework

            *** Variable ***
            ${IP}   172.24.172.111
            ${user}   sysadmin
            ${pass}   newpassword

            *** Test Cases ***
            Sample
                Connect to web services   ${IP}   ${user}   ${pass}   db_read=true   #FLOOR0 returned if there is any
                Get database information   #SITE0 returned
                Upload floorplan   SITE0   .//input//floorplan.efg.gz   #FLOOR0 returned
                Get floorplan   SITE0   FLOOR0   .//artifacts

        For more information, visit `/site/X/plan/Y`_.
        
        .. _/site/X/plan/Y: http://wiki:8090/pages/viewpage.action?pageId=4849856#DataWebServiceAPI-/api/site/X/plan/Y
        """

        assert site_index in siteinfo.site_ids, AssertionError('Invalid site {0}.  '
                                                               'Please select from the following sites {1}'
                                                               .format(site_index, siteinfo.site_ids.keys()))

        assert floor_index in _TableManagement_Keywords.floorplans, \
            AssertionError('Invalid floor {0}.  Please select from the following floors {1}'
                           .format(floor_index, _TableManagement_Keywords.floorplans.keys()))

        if not os.path.exists(location):
            os.makedirs(location)

        _file_loc = '{0}/{1}.egf.gz'.format(location, _TableManagement_Keywords.floorplans[floor_index])

        response = self._get('site/{0}/plan/{1}'.format(siteinfo.site_ids[site_index],
                                                        _TableManagement_Keywords.floorplans[floor_index]), session_index=session_index)

        with open(_file_loc, 'wb') as floorplan:
            floorplan.write(response[0].content)

        return _file_loc

    def upload_floorplan(self, site_index, location, session_index=''):
        """ Upload Floorplan

        Upload a floor plan to a site.
    
        Variable
            *site_index*
                - reference to the site id index generated by reading the ECU databases
            *location*
                - location of the floorplan to be uploaded
            *session_index*
                - optional input, will use the most recently returned session id if not specified.

        .. code:: robotframework

            *** Variable ***
            ${user}   sysadmin
            ${pass}   newpassword

            *** Test Cases ***
            Sample
                login   ${user}   ${pass}
                Get database information   #SITE0 returned
                Upload floorplan   SITE0   .//input//floorplan.efg.gz
    
        For more information, visit `/site/X/plan/Y`_.
    
        .. _/site/X/plan/Y: http://wiki:8090/pages/viewpage.action?pageId=4849856#DataWebServiceAPI-/api/site/X/plan/Y
        """

        assert site_index in siteinfo.site_ids, AssertionError('Invalid site {0}\n'
                                                               'Please select from the following sites {1}'
                                                               .format(site_index, siteinfo.site_ids.keys()))

        assert os.path.exists(location), IOError('Unable to file input file {0}'.format(location))

        # When not offline mode, assert "miscinfo.lock_id is not None".
        # When offline mode, assert True.
        assert miscinfo.lock_id is not None if not self.offline else True, AssertionError('Configuration not locked!\n'
                                                                                          'Please lock configuration prior.')

        _floorname = (ntpath.basename(location)).split('.')[0]
        _gen_id = utils.generate_id()

        _renamed_file = location.replace(_floorname, _gen_id)
        copyfile(location, _renamed_file)

        _table = dict()
        _table['add'] = list()
        _table['update'] = list()
        if not self.offline:
            _table['lock-id'] = miscinfo.lock_id

        _table_update_data = dict()
        _table_update_data['DISPLAY_MODE'] = '0'
        _table_update_data['FLOOR_LEVEL'] = '{0}'.format(len(_TableManagement_Keywords.floorplans))
        _table_update_data['LASTCHANGE'] = datetime.utcnow().isoformat()
        _table_update_data['CHANGE_ID'] = utils.generate_id()
        _table_update_data['IDENTIFIER'] = _gen_id
        _table_update_data['NAME'] = 'Floor'
        _table_update_data['PLAN_DATA'] = 'Visible_Layers=2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,21\n' \
                                          'FloorColorType=Grayscale'

        _table['add'].append({'plan': [_table_update_data]})
        _table['update'].append({'plan': [_table_update_data]})

        with open(_renamed_file, 'rb') as floorplan:
            self._assert_json_response_stop_on_error(self._post('site/{0}/plan/{1}'
                                                                .format(siteinfo.site_ids[site_index], _gen_id),
                                                                floorplan, session_index=session_index))

        os.remove(_renamed_file)

        self.update_tables(site_index, json.dumps(_table), '', '')
        _TableManagement_Keywords.floorplans['FLOOR{0}'.format(len(_TableManagement_Keywords.floorplans))] = _gen_id

    def delete_floorplan(self, site_index, floor_index, session_index=''):
        """ Delete Floorplan

        Delete a floor plan from a site.

        Variable
            *site_index*
                - reference to the site id index generated by reading the ECU databases
            *floor*
                - reference to the floor id to be deleted
            *session_index*
                - optional input, will use the most recently returned session id if not specified.

        .. code:: robotframework

            *** Variable ***
            ${user}   sysadmin
            ${pass}   newpassword

            *** Test Cases ***
            Sample
                login   ${user}   ${pass}
                Get database information   #SITE0 returned
                Upload floorplan   SITE0   .//input//floorplan.efg.gz   #FLOOR0 returned
                Get floorplan   SITE0   FLOOR0   .//artifacts
                Delete floorplan   SITE0   FLOOR0

        For more information, visit `/site/X/plan/Y`_.

        .. _/site/X/plan/Y: http://wiki:8090/pages/viewpage.action?pageId=4849856#DataWebServiceAPI-/api/site/X/plan/Y
        """
        assert site_index in siteinfo.site_ids, AssertionError('Invalid site {0}'
                                                               'Please select from the following sites {1}'
                                                               .format(site_index, siteinfo.site_ids.keys()))

        assert floor_index in _TableManagement_Keywords.floorplans, \
            AssertionError('Invalid floor {0}.  Please select from the following floors {1}'
                           .format(floor_index, _TableManagement_Keywords.floorplans.keys()))

        self._assert_json_response_stop_on_error(
            self._delete('site/{0}/plan/{1}'.format(siteinfo.site_ids[site_index],
                                                    _TableManagement_Keywords.floorplans[floor_index]), session_index=session_index))

    def get_table(self, site_index, table, session_index=''):
        """ Get Table

        Request a table from the ECU database.
        (Database tables should be read upon connection to the ECU)

        Variable
            *site_index*
                - reference to the site id index generated by reading the ECU databases
            *floor*
                - reference to the floor id to be deleted
            *session_index*
                - optional input, will use the most recently returned session id if not specified.

        .. code:: robotframework

            *** Test Cases ***
            Sample
                Get table   site_index=SITE0   table=db_info

        For more information, visit `/site/X/table/Y`_.

        .. _/site/X/table/Y: http://wiki:8090/pages/viewpage.action?pageId=4849856#DataWebServiceAPI-/api/site/X/table/Y
        """
        assert site_index in siteinfo.site_ids, AssertionError('Invalid site {0}'
                                                               'Please select from the following sites {1}'
                                                               .format(site_index, siteinfo.site_ids.keys()))

        response = self._get('site/{0}/table/{1}'.format(siteinfo.site_ids[site_index], table), session_index=session_index)

        logger.info(response[0].content)

    def update_table(self, site_index, table, json_payload, update_id=None, lock_id=None, session_index=''):
        """ Update Table
        
        Updates a specific entry of a table.
        The primary key of the table must be specified to edit a table entry
        
        Variables
            *site_index*
                - reference to the site id index generated by reading the ECU databases
            *table*
                - reference to the table to be accessed
            *json_payload*
                - string that contains json configuration of the table entries to update
            *update_id*
                - string that needed to be empty or match the current update_id
            *lock_id*
                - string that needed when testing user who does not have lock_id or who has the super power to override the lock_id
            *session_index*
                - optional input, will use the most recently returned session id if not specified.

        .. code:: robotframework
        
            *** Variables ***
            ${tbl_entry}      SEPARATOR=\\n
            ...   {
            ...       "lock-id": "",
            ...       "data": [
            ...            {
            ...               "DB_DATA": "",
            ...               "DB_NAME": "Project",
            ...               "DB_VALUE": "Modified Project"
            ...             }
            ...        ]
            ...   }
            ${tbl}      SEPARATOR=\\n
            ...   {
            ...       "update-id" : "",
            ...       "lock-id": "",
            ...       "data": [
            ...             {"IDENTIFIER": "11111111-1111-1111-1111-111111111111", "IP_ADDRESS": "${IP}"},
            ...             {"IDENTIFIER": "22222222-2222-2222-2222-222222222222", "IP_ADDRESS": "${master_IP_2}"},
            ...             {"IDENTIFIER": "33333333-3333-3333-3333-333333333333", "IP_ADDRESS": "${slave_IP}"},
            ...             {"IDENTIFIER": "44444444-4444-4444-4444-444444444444", "IP_ADDRESS": "${slave_IP_B}"}
            ...         ]
            ...   }
            
            *** Test Cases ***
            Sample
                ${lock_id}=   Lock configuration   USER0   force=true
                Get database information    #SITE0 returned
                ${update_id}=   get update id
                Update table   site_index=SITE0   table=db_info   json_payload=${tbl_entry}   update_id=${update_id}   lock_id=${lock_id}
                Update table   site_index=SITE0   table=ecu   json_payload=${tbl}   update_id=${update_id}   lock_id=

         For more information, visit `/site/X/table/Y`_.
        
        .. _/site/X/table/Y: http://wiki:8090/pages/viewpage.action?pageId=4849856#DataWebServiceAPI-/api/site/X/table/Y
        """
        assert site_index in siteinfo.site_ids, AssertionError('Invalid site {0}'
                                                               'Please select from the following sites {1}'
                                                               .format(site_index, siteinfo.site_ids.keys()))
        if lock_id is not None:
            miscinfo.lock_id = lock_id

        # When not offline mode, assert "miscinfo.lock_id is not None".
        # When offline mode, assert True.
        assert miscinfo.lock_id is not None if not self.offline else True, AssertionError('Configuration not locked!\n'
                                                                                          'Please lock configuration prior.')

        try:
            logger.info('json_payload is {0}'.format(json_payload))
            _input_dict = json.loads(json_payload)
            _input_dict['lock-id'] = miscinfo.lock_id
            if update_id != None:
                _input_dict['update-id'] = update_id
            # logger.info('input is {0}'.format(_input_dict))
        except ValueError:
            raise ValueError('Invalid json payload!')

        logger.info("input is {0}".format(_input_dict))
        logger.info('URL is site/{0}/table/{1}'.format(siteinfo.site_ids[site_index], table))
        self._assert_json_response_stop_on_error(self._post('site/{0}/table/{1}'
                                                            .format(siteinfo.site_ids[site_index], table), json.dumps(_input_dict), session_index=session_index))
        # logger.info(self.last_url)

    def update_tables(self, site_index, json_payload, update_id=None, lock_id=None, session_index=''):
        """ Update Complete Tables

        Updates the whole table.
        Overwrites all table entries with the specified table input

        Variables
            *site_index*
                - reference to the site id index generated by reading the ECU databases
            *json_payload*
                - string that contains json configuration of the tables to update
            *update_id*
                - string that needed to be empty or match the current update_id
            *lock_id*
                - string that needed when testing user who does not have lock_id or who has the super power to override the lock_id
            *session_index*
                - optional input, will use the most recently returned session id if not specified.

        .. code:: robotframework

            *** Variables ***
            ${tbl}      SEPARATOR=\\n
            ...   {
            ...       "lock-id": "",
            ...       "add": [
            ...           {
            ...               "db_info": [
            ...                   {"DB_DATA": "", "DB_NAME": "Jia", "DB_VALUE": "7+"}
            ...                ]
            ...           }
            ...       ]
            ...   }

            *** Test Cases ***
            Sample
                Login   ${user}   ${pass}
                Get user list   #USER0 returned
                ${lock_id}=   Lock configuration   USER0   force=true
                Get database information   #SITE0 returned
                ${update_id}=   get update id
                Update tables   site_index=SITE0   json_payload=${tbl}   update_id=${update_id}   lock_id=${lock_id}
                Update tables   site_index=SITE0   json_payload=${tbl}   update_id=${update_id}   lock_id=invalid

         For more information, visit `/site/X/update`_.

        .. _/site/X/update: http://wiki:8090/pages/viewpage.action?pageId=4849856#DataWebServiceAPI-/api/site/X/update
        """
        assert site_index in siteinfo.site_ids, AssertionError('Invalid site {0}'
                                                               'Please select from the following sites {1}'
                                                               .format(site_index, siteinfo.site_ids.keys()))
        if lock_id is not None:
            miscinfo.lock_id = lock_id

        # When not offline mode, assert "miscinfo.lock_id is not None".
        # When offline mode, assert True.
        assert miscinfo.lock_id is not None if not self.offline else True,\
            AssertionError('Configuration not locked!\nPlease lock configuration prior.')

        try:
            _input_dict = json.loads(json_payload)
            _input_dict['lock-id'] = miscinfo.lock_id
            if update_id != None:
                _input_dict['update-id'] = update_id
            # logger.info('input is {0}'.format(_input_dict))
        except ValueError:
            raise ValueError('Invalid json payload!')

        self._assert_json_response_stop_on_error(self._post('site/{0}/update'
                                                            .format(siteinfo.site_ids[site_index]),
                                                            json.dumps(_input_dict), session_index=session_index))
        # logger.info(self.last_url)
